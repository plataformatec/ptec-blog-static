<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>benchmark « Plataformatec Blog</title>
	<atom:link href="/tag/benchmark/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Plataformatec&#039;s place to talk about Ruby, Ruby on Rails, Elixir, and software engineering</description>
	<lastBuildDate>Mon, 21 Feb 2011 20:42:20 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Understanding the latest Rails benchmarks</title>
		<link>/2011/02/understanding-the-latest-rails-benchmarks/</link>
					<comments>/2011/02/understanding-the-latest-rails-benchmarks/#comments</comments>
		
		<dc:creator><![CDATA[José Valim]]></dc:creator>
		<pubDate>Mon, 21 Feb 2011 15:54:54 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[benchmark]]></category>
		<category><![CDATA[rails]]></category>
		<guid isPermaLink="false">/?p=1868</guid>

					<description><![CDATA[<p>Erik DeBill has put two interesting benchmarks on his blog. The first one compares the performance of different Ruby implementations in Rails development mode while the second compares their performance in Rails boot time. If you haven&#8217;t read them yet, please do it now. Benchmarking code is an important practice, but it can be misleading ... <a class="read-more-link" href="/2011/02/understanding-the-latest-rails-benchmarks/">»</a></p>
<p>The post <a href="/2011/02/understanding-the-latest-rails-benchmarks/">Understanding the latest Rails benchmarks</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Erik DeBill has put two interesting benchmarks on his blog. <a href="http://erik.debill.org/2011/02/03/ruby-performance-in-the-rails-development-environment" target="_blank">The first one compares the performance of different Ruby implementations in Rails development mode</a> while <a href="http://erik.debill.org/2011/02/19/ruby-start-up-times">the second compares their performance in Rails boot time</a>. If you haven&#8217;t read them yet, please do it now.</p>
<p>Benchmarking code is an important practice, but it can be misleading if you fail to understand the root causes that lead to the different results.</p>
<h3>Performance in development mode</h3>
<p>In the first blog post, it is <strong>guessed</strong> that the root case for having slow requests in development is because Rails eager loads all models and controllers for each request:</p>
<blockquote><p>
Now, what I&#8217;d really like is a way to avoid recompiling everything every time. If I could have Rails recompile just the model or controller I&#8217;m working on and skip all the others, that&#8217;d be grand. I&#8217;ve taken a couple stabs at it, but I haven&#8217;t succeeded yet.
</p></blockquote>
<p>This is wrong! Rails, in development, only loads the model and the controller you are using in that specific request. This is very easy to verify if you create a new application, scaffold two resources and add a <code>puts self.name</code> in their class definition. If you access one controller, it will only load the model explicitly referenced in that controller. Even the model associations try to be lazy in that aspect, always loading the minimum it can.</p>
<p>So you may ask, why Rails is getting so slow after adding more scaffolds?</p>
<p>It happens because Rails 3.0 includes all helpers by default in your <code>ApplicationController</code>. So at the beginning of each request, Rails needs to load all helpers. Loading a helper in development mode is slow because <code>ActiveSupport::Dependencies</code> needs to track which dependencies were added when a file is loaded. This tracking basically happens by checking which constants were added invoking <code>Object.constants</code> before and after the file was loaded. Tracking these constants take more than 50% of the time in the request, mainly because invoking <code>Object.constants</code> is slow.</p>
<p>In other words, the main reason for an implementation to perform better in the benchmarks showed in the blog post is if it can calculate <code>Object.constants</code> faster. Those results do not mean at all that an implementation is more suitable than other for Rails development. In order to have real results, we would need a real application that is not made of 1000 scaffold (or, in this case, 1000 helpers).</p>
<p>In any case, if the root cause is in loading all helpers, how can we make it better? There are a few things:</p>
<p>1) Obviously, the problem can be fixed by having less helper files. Since Rails scaffold automatically generates helper files, it is common that applications have a bunch of empty helpers. <strong>Get rid of them</strong>. If you prefer you can even turn off the automatic generation of helpers in scaffold by adding the following to your application configuration:</p>
<pre lang="ruby">
config.generators.helper = false
</pre>
<p>2) If you simply don&#8217;t want to include all helpers, there is a method called <code>clear_helpers</code> that you could invoke in your <code>ApplicationController</code>. <strong>This method won&#8217;t fix the problem</strong> because it is invoked too late, after all the helpers were already loaded. So you get the feature, but not the performance improvement.</p>
<p>3) Rails master (upcoming Rails 3.1) has a configuration option that allows you to effectively turn these helpers off getting both the feature and the performance improvement:</p>
<pre lang="ruby">
config.action_controller.include_all_helpers = false
</pre>
<h3>Boot performance</h3>
<p>The second blog post shows how Rails boot time performs in different implementations. Since it was not made explicit in which environment those benchmarks were executed, I will assume it happened on development.</p>
<p>At the end of the second blog post, it tries to associate the performance of booting Rails in development with the amount of code inside the app. However, <strong>when you boot an application in development, no model, controller or helper is loaded at all</strong> unless you explicitly access them in an initializer or in your routes file. Once again, you can check that by adding some <code>puts</code> to your classes.</p>
<p>So, you may ask one more time, what makes booting up so slow?</p>
<p>Rails 3 has a new router that can match paths very fast, but in order to do so, it needs to compile each route into a regular expression and that takes some time (although it could probably be made faster). And it is exactly the routes compilation that is slow on boot time. We can easily reproduce it by adding the following to our router:</p>
<pre lang="ruby">
Foo::Application.routes.draw do
  1000.times do |index|
    resources :"posts#{index}"
  end
end
</pre>
<p>This took 55 seconds on my machine using REE which is quite close to the value that he showed on his benchmark.</p>
<p>Again, benchmarking code is important, but more important is to correctly interpret the results. In his example, it is likely that most of Rails booting time is spent on compiling the routes and the benchmark just shows how good different Ruby implementations are in handling all these regular expressions.</p>
<h3>Wrapping up</h3>
<p>Much more interesting benchmarks for Rails boot time would actually be performed in production environment, which actually has to load all the code inside the app folder and compile the routes file. Regardless, <strong>developers starting new applications should always be skeptical about choosing a Ruby implementation based on other application&#8217;s benchmarks</strong>.</p>
<p>When starting out a new application, any Ruby implementation should suit you just fine unless you have a stronger constraint (like Java integration). Once your application starts to grow and you want to evaluate how well it performs in different implementations, you should do your own benchmarks and see how it goes. In any case, don&#8217;t jump into conclusions. If you need to investigate deeper, each implementation has its own sets of benchmarking and profiling tools that may help you really understand what is actually slow and how to improve it.</p>
<p>I also want to thank <a href="http://ruby-prof.rubyforge.org/" target="_blank">ruby-prof</a> authors and maintainers, for such an amazing tool, and <a href="http://twitter.com/wycats" target="_blank">Yehuda Katz</a>, who helped me profile a demo Rails application in order to write this detailed response.</p>
<p>And you? Have you done benchmarks in your applications and found any interesting data you would like to share?</p><p>The post <a href="/2011/02/understanding-the-latest-rails-benchmarks/">Understanding the latest Rails benchmarks</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/2011/02/understanding-the-latest-rails-benchmarks/feed/</wfw:commentRss>
			<slash:comments>7</slash:comments>
		
		
			</item>
	</channel>
</rss>
