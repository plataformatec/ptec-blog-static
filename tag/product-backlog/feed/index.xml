<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>product backlog « Plataformatec Blog</title>
	<atom:link href="/tag/product-backlog/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Plataformatec&#039;s place to talk about Ruby, Ruby on Rails, Elixir, and software engineering</description>
	<lastBuildDate>Fri, 08 Dec 2017 16:02:49 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Estoques no desenvolvimento de software</title>
		<link>/2017/12/estoques-no-desenvolvimento-de-software/</link>
		
		<dc:creator><![CDATA[Guilherme Fré]]></dc:creator>
		<pubDate>Fri, 08 Dec 2017 14:32:41 +0000</pubDate>
				<category><![CDATA[Português]]></category>
		<category><![CDATA[Agile]]></category>
		<category><![CDATA[gerenciamento de projetos]]></category>
		<category><![CDATA[metodologia ágil]]></category>
		<category><![CDATA[product backlog]]></category>
		<category><![CDATA[refining]]></category>
		<category><![CDATA[user story]]></category>
		<guid isPermaLink="false">/?p=7003</guid>

					<description><![CDATA[<p>Sempre ouvi e li que os grandes vilões da produtividade de um sistema são os delays ocasionados pelo tempo de espera em filas. Tenho certeza que você também já ouviu ou leu algo sobre isso. Da mesma forma, os estoques representam uma das maiores causas de desperdício, especialmente para a manufatura. Mas, pensando em desenvolvimento ... <a class="read-more-link" href="/2017/12/estoques-no-desenvolvimento-de-software/">»</a></p>
<p>The post <a href="/2017/12/estoques-no-desenvolvimento-de-software/">Estoques no desenvolvimento de software</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Sempre ouvi e li que os grandes vilões da produtividade de um sistema são os <em>delays</em> ocasionados pelo tempo de espera em filas. Tenho certeza que você também já ouviu ou leu algo sobre isso. Da mesma forma, os estoques representam uma das maiores causas de desperdício, especialmente para a manufatura.</p>
<p>Mas, pensando em desenvolvimento de software, será que as filas e estoques de demandas (qualquer item de trabalho de uma equipe de software, como histórias de usuários, bugs, etc&#8230;) se comportam da mesma maneira e trazem as mesmas consequências em todos os estágios do fluxo de desenvolvimento? Serão essas consequências sempre negativas?</p>
<p>Para respondermos essas questões, consideremos uma equipe que trabalha com o <em>workflow</em> composto pelas seguintes etapas:</p>
<ul>
<li><strong>Backlog</strong>: Itens já escritos pelo PO (<em>Product Owner</em>) e que ainda precisam ser refinados com a equipe;</li>
<li><strong>Ready to Dev</strong>: Itens que já foram refinados com a equipe e estão aguardando o início do desenvolvimento;</li>
<li><strong>In Development</strong>: Itens em desenvolvimento;</li>
<li><strong>Ready to Test</strong>: Itens desenvolvidos e aguardando testes;</li>
<li><strong>Testing</strong>: Itens sendo testados pelo time de QA (<em>Quality Assurance</em>);</li>
<li><strong>Ready to Deploy</strong>: Itens já aprovados por QA e aguardando o deploy em produção;</li>
<li><strong>In Production</strong>: Itens em produção.</li>
</ul>
<p>Da lista acima, conseguimos identificar algumas etapas de filas, onde seria possível acumular estoques de demandas aguardando as próximas etapas. São elas: <em>Backlog</em>, <em>Ready to Dev</em>, <em>Ready to Test</em> e <em>Ready to Deploy</em>.</p>
<p>Como será que os estoques se comportam em cada uma dessas etapas?</p>
<h3>Estoque em <em>Backlog</em>?</h3>
<p><em>Cenário: como já tinha uma ideia do que seria trabalhado pelos próximos meses, o PO da equipe decidiu escrever uma grande quantidade de histórias de usuário.</em></p>
<p>Para este cenário, há um risco considerável de desperdício do esforço do PO e até das histórias de usuário escritas, uma vez que que podem ocorrer mudanças na estratégia do produto. Por exemplo, um concorrente lançou uma nova feature que não estava mapeada e decidiu-se implementá-la também. Novas histórias precisarão ser escritas e outras possivelmente serão fechadas como obsoletas.</p>
<h3>Estoque em <em>Ready to Dev</em>?</h3>
<p><em>Cenário: o PO da equipe sairá de férias nos próximos dias e não haverá um substituto. Nos últimos dias de trabalho antes do descanso, o PO e a equipe se esforçaram para refinar uma grande quantidade de histórias de usuário para que a equipe trabalhasse durante o período.</em></p>
<p>Neste caso, há um risco maior de que os acordos entre PO e equipe, discutidos durante os refinamentos, sejam esquecidos com o passar do tempo (é sempre melhor que esses acordos estejam frescos na cabeça da equipe).</p>
<p>Porém, trata-se de uma opção bastante interessante para que a equipe não sofra de <em>starvation</em> durante a ausência do PO. Além de ser uma opção melhor do que deixar as histórias de usuários na etapa anterior (<em>Backlog</em>), o que poderia elevar o risco de desalinhamento entre o que era planejeado e o que será desenvolvido.</p>
<p>No geral, é importante ter bem claro quem pode tomar as decisões do produto em caso de ausência do PO, pois, mesmo com a adoção dessa estratégia de estoque, dúvidas e incertezas certamente surgirão na sequência do processo. Em muitos casos, essa responsabilidade acaba ficando com alguém da equipe de design, um facilitador do processo ou mesmo com a própria equipe de desenvolvimento, que pode tomar as decisões em conjunto.</p>
<h3>Estoque em <em>Ready to Test</em>?</h3>
<p><em>Cenário: o responsável pelo QA da equipe ficará ausente por algumas semanas para realização de uma cirurgia. A equipe optou por continuar o desenvolvimento das histórias de usuário e deixá-las acumulando em &#8216;Ready to Test&#8217; até o retorno do QA.</em></p>
<p>Para esta abordagem, como as funcionalidades não serão testadas até o retorno do responsável pelo QA, o ciclo de feedback será mais longo. Isso trará desvantagens como:</p>
<ol>
<li><strong>Aumento no WIP (trabalho em progresso)</strong>: das filas que discutimos até aqui, esta é a primeira em que há código em progresso sendo estocado (nas anteriores, já havia esforço de análise e design). Com isso, a quantidade de WIP no sistema tende a aumentar, e o Wesley Zapellini já nos explicou em seu e-book <a href="http://pages.plataformatec.com.br/5-estrategias-para-otimizar-fluxo-de-desenvolvimento-de-software">&#8220;5 Estratégias para otimizar o fluxo de desenvolvimento de software&#8221;</a> os principais efeitos colaterais de ter o WIP alto.</li>
<li><strong>Redução da visibilidade do processo</strong>: com mais tarefas no board da equipe, tende a ficar mais complicado ter visibilidade do que está realmente em andamento.</li>
<li><strong>Redução da previsibilidade do processo</strong>: com a pausa do processo de testes, todas as tarefas que estiverem ou chegarem na fila de <em>Ready to Test</em> durante o período de ausência do responsável de QA ficarão por lá até o retorno dele, é claro. O <em>lead time</em> do processo (tempo entre o início do trabalho da equipe na demanda e o término dela) será, portanto, impactado.</li>
<li><strong>Aumento no número de bugs e não conformidades</strong>: como já mencionado no e-book <a href="http://pages.plataformatec.com.br/5-estrategias-para-otimizar-fluxo-de-desenvolvimento-de-software">&#8220;5 Estratégias para otimizar o fluxo de desenvolvimento de software&#8221;</a>, o aumento do WIP tende a impactar diretamente na qualidade do software. Neste cenário, há ainda um ponto adicional: a falta de feedback quanto à conformidade das histórias desenvolvidas faz com que histórias sejam iniciadas com uma base já fora de conformidade, o que tende a sobrepor os problemas.</li>
</ol>
<p>As imagens a seguir apresentam a distribuição do <em>lead time</em> das demandas da equipe imediatamente antes e após as férias do profissional de QA (para entender melhor os gráficos, recomendo o blogpost do Raphael Albino <a href="/2017/08/metricas-ageis-o-que-lead-time-fala-sobre-seu-projeto/">&#8220;Métricas Ágeis: o que Lead Time fala sobre seu projeto&#8221;</a>). Na primeira delas, antes do início das férias do profissional, é possível ver que há pouca variabilidade no <em>lead time</em> das entregas e pouco WIP.</p>
<p><img fetchpriority="high" decoding="async" class="alignleft size-full wp-image-7004" src="/wp-content/uploads/2017/12/ready-to-qa-before.png" alt="Antes das férias" width="1919" height="907" srcset="/wp-content/uploads/2017/12/ready-to-qa-before.png 1919w, /wp-content/uploads/2017/12/ready-to-qa-before-300x142.png 300w, /wp-content/uploads/2017/12/ready-to-qa-before-768x363.png 768w, /wp-content/uploads/2017/12/ready-to-qa-before-1024x484.png 1024w" sizes="(max-width: 1919px) 100vw, 1919px" /></p>
<p>Já após as férias, é possível perceber uma tendência de aumento no <em>lead time</em> (média projetada já bastante acima do percentil 95%), o que deve contribuir para uma redução na previsibilidade das entregas. Além disso, é possível ver que a quantidade de trabalho em progresso também teve um aumento considerável:</p>
<p><img decoding="async" class="alignleft size-full wp-image-7006" src="/wp-content/uploads/2017/12/ready-to-qa-after.png" alt="Após as férias" width="1919" height="907" srcset="/wp-content/uploads/2017/12/ready-to-qa-after.png 1919w, /wp-content/uploads/2017/12/ready-to-qa-after-300x142.png 300w, /wp-content/uploads/2017/12/ready-to-qa-after-768x363.png 768w, /wp-content/uploads/2017/12/ready-to-qa-after-1024x484.png 1024w" sizes="(max-width: 1919px) 100vw, 1919px" /></p>
<p>Já vimos os possíveis impactos dessa estratégia, mas o que podemos fazer em uma situação como esta? Supondo que não haja outro profissional de QA disponível para a equipe, alguém do time pode assumir essa atividade ou, o que temos feito com sucesso em alguns contextos, a equipe como um todo pode se dividir para realizar os testes: sempre que alguém mover uma demanda para QA, antes de iniciar uma nova, pode verificar se há alguma pendente de testes e já puxá-la. A única sugestão é para que uma demanda não seja testada pela mesma pessoa que a desenvolveu.</p>
<h3>Estoque em <em>Ready to Deploy</em>?</h3>
<p><em>Cenário: por opção do PO, decidiu-se que todas as histórias mapeadas inicialmente precisariam estar prontas para que as novas features fossem para produção.</em></p>
<p>Neste caso, o maior impacto do ponto de vista do processo é que será preciso garantir que essas histórias praticamente prontas não criem um empecilho para que outras linhas de desenvolvimento integrem código em produção. De maneira geral, a sugestão é integrar código pronto em produção sempre que possível (há técnicas para se fazer isso sem necessariamente liberar as funcionalidades para os usuários, como a técnica de <em>Feature Toggle</em>). Além de desbloquear futuros deploys que precisem &#8220;passar na frente&#8221; (como <em>bug fixes</em>, por exemplo), essa estratégia ainda permitirá que os deploys sejam mais tranquilos e sem grandes riscos.</p>
<p>Do ponto de vista de produto, e considerando o Cost of Delay conforme nos apresentou o Lucas Colucci em seu blog post <a href="/2017/06/quanto-a-empresa-perde-financeiramente-quando-o-projeto-atrasa/">&#8220;Quanto a empresa perde financeiramente quando o projeto atrasa?&#8221;</a> sobre o assunto, é sempre interessante disponibilizar as novas features para o cliente, mesmo que todas as features planejadas no escopo de um projeto não tenham sido finalizadas.</p>
<p>Um outro cenário muito comum, especialmente em equipes maiores, é o da existência de janelas e filas para deploy. Geralmente, essa estratégia é adotada quando:<br />
1. o ferramental de deploy/rollback exige tempo e trabalho manual (frequentemente, com recursos compartilhados por várias equipes),<br />
2. quando há falta de confiança quanto à qualidade do que está sendo colocado no ar (alguém se perguntaria: <em>será que o código está adicionando bugs?</em>)<br />
3. ou quando há muitas equipes trabalhando em um mesmo produto.</p>
<p>Essa burocracia para o deploy (horários pré-definidos, dias da semana permitidos, comitês para decidir o que vai e o que não vai pro ar&#8230;) contribuirá para atrasar a entrada das novas funcionalidades em produção. Para reverter esse cenário, o ideal é investir em cobertura de testes e em automações em geral (tanto da execução dos testes, quanto de deploy/rollback), o que fará com que o processo de colocar código novo no ar se torne mais simples e <em>indolor</em>, tanto para quem faz o deploy quanto para quem usa o produto.</p>
<h2>Conclusão</h2>
<p>Em geral, as filas e estoques no desenvolvimento de software, especialmente em contextos ágeis, trazem como consequência aumento no risco de desperdício de esforço e de oportunidades de negócio representadas pelas demandas em estoque, principalmente as que já estão mais próximas de serem finalizadas e que poderiam gerar receitas para a empresa ou melhorias para os usuários.</p>
<p>Porém, como vimos acima, há também outras consequências que variam conforme o estágio do fluxo de desenvolvimento em que a demanda está, podendo impactar na qualidade do código e aumentar o número de bugs, ou até evitar uma possível situação de <em>starvation</em> da equipe.</p>
<p>E você? Quais situações já enfrentou com estoques e filas em suas equipes? Deixe seus relatos e comentários abaixo!</p>
<div style="border: 1px solid #009eaa; border-radius: 6px; margin: 32px 0; padding: 22px 24px; font-family: sans-serif;">
E-book gratuito:<br />
<span style="font-size: 1.4em; line-height: 1.3em;">5 Estratégias para otimizar o fluxo de desenvolvimento de software</span><br />
<a style="background: #009eaa; border: none; border-radius: 3px; color: #fff; display: inline-block; font-size: 12px; line-height: 1.5; margin-top: 18px; padding: 8px 16px; text-align: center; text-decoration: none; font-weight: bold; letter-spacing: 0.05em;" href="http://pages.plataformatec.com.br/5-estrategias-para-otimizar-fluxo-de-desenvolvimento-de-software?utm_source=our-blog&amp;utm_medium=referral&amp;utm_campaign=ebook-5-estratgias-para-fluxo&amp;utm_content=cta-blog-post-bottom" target="_blank" rel="noopener">BAIXAR E-BOOK</a>
</div><p>The post <a href="/2017/12/estoques-no-desenvolvimento-de-software/">Estoques no desenvolvimento de software</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>The user story in development was deprioritized, what now?</title>
		<link>/2017/05/the-user-story-in-development-was-deprioritized-what-now/</link>
		
		<dc:creator><![CDATA[Lucas Colucci]]></dc:creator>
		<pubDate>Thu, 04 May 2017 22:30:40 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[product backlog]]></category>
		<category><![CDATA[product owner]]></category>
		<category><![CDATA[project management]]></category>
		<category><![CDATA[project manager]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=6308</guid>

					<description><![CDATA[<p>Let&#8217;s say you have a Kanban board like the following: Then, suddenly, the P.O. discovers that the features D and E were developed by a competitor and that you are losing users because of that. Therefore, the P.O. decides to deprioritize story C. This is only an example of why a card might be deprioritized ... <a class="read-more-link" href="/2017/05/the-user-story-in-development-was-deprioritized-what-now/">»</a></p>
<p>The post <a href="/2017/05/the-user-story-in-development-was-deprioritized-what-now/">The user story in development was deprioritized, what now?</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Let&#8217;s say you have a Kanban board like the following:</p>
<p><img decoding="async" src="/wp-content/uploads/2017/05/card-flow-e1493907975371.png" alt="Kanban" width="400" height="268" class="aligncenter size-full wp-image-6286" style="border:none;"/></p>
<p>Then, suddenly, the P.O. discovers that the features D and E were developed by a competitor and that you are losing users because of that. Therefore, the P.O. decides to deprioritize story C. This is only an example of why a card might be deprioritized in the middle of its development. But now that it was deprioritized, what happens to story C?</p>
<p>Well, to answer that, let me make a parallel with an alcohol-based perfume company.</p>
<p>In the backlog column, the company has the bottle ready to be filled but no fluid yet. When the bottle starts to be filled, the card goes to &#8220;in progress&#8221;. When the bottle is totally filled, the bottle is closed and the card goes to done.</p>
<p><img loading="lazy" decoding="async" src="/wp-content/uploads/2017/05/perfume-flow-e1493908094223.png" alt="Perfume flow" width="400" height="275" class="aligncenter size-full wp-image-6287" style="border:none;" /></p>
<p>So what happens if another perfume suddenly receives a priority greater than the priority of the bottle being filled? Well, as we all know, alcohol-based fluids are volatile and, with time, they will completely evaporate, requiring them to be refilled.</p>
<p><img loading="lazy" decoding="async" src="/wp-content/uploads/2017/05/perfume-flow-volatile-e1493908131534.png" alt="Perfume flow volatile" width="400" height="567" class="aligncenter size-full wp-image-6288" style="border:none;" /></p>
<p>The same happens with the story and its code. With time, the code that is inside the story gets obsolete and unnecessary, losing its value. What to do with the story depends on the following rationales:</p>
<ul>
<li><strong>How long will the story C stay in the same stage?</strong>
<ul>
<li>If the story stays too long in the same stage, some part of the work may get useless, therefore, you could just remove it from the board and put it back on backlog, since some refining might be needed when this story is chosen gain.</li>
<li>If the story will stay there for a short time, you may want to leave it there and, when it can be worked on, you may still use what was already developed.</li>
</ul>
</li>
<li><strong>What is the value story C will generate after being done?</strong><br />
Let&#8217;s say that the return on the development of that feature is small. Is it worth to pause its development and run the risk of investing even more money on the development later? Will the return on its development be greater than the development time?</p>
</li>
</ul>
<p>For this to be true, the following needs to happen (visualized in the chart below):</p>
<ul>
<li>$ spent with initial development + $ spent with rest of the development &lt; story C $ return
<ul>
<li>The amount spent with rest of the development will increase with time, since the initial development starts to lose value.</li>
</ul>
</li>
<li>If the amount spent is greater than the return, it is better to ignore the functionality. However, this math is not as easy as it seems&#8230; You need to account for risks, increased revenue, increase the number of users of your product, etc. So be careful!</li>
</ul>
<p><img loading="lazy" decoding="async" src="/wp-content/uploads/2017/05/chart-1024x768.png" alt="Gráficos" width="1024" height="768" class="aligncenter size-large wp-image-6289" style="border:none;max-width: 99%;" /></p>
<p>Therefore, based on those, you can possibly do four things:</p>
<ul>
<li><strong>Leave it on the column and restart it when its priority arrives</strong><br />
The pause will be fast and will not harm the development of the card. In this case, it is important to flag the story somehow so that the whole team can see that the story is &#8220;blocked&#8221; by the P.O. due to its prioritization.</p>
</li>
<li>
<p><strong>Take it back to the backlog, and restart it when its priority arrives</strong><br />
The pause will be long and the card will need more refinement.</p>
</li>
<li>
<p><strong>Finish it first, before getting another card</strong><br />
The card is almost done, and if you stop it, it will not generate value anymore.</p>
</li>
<li>
<p><strong>Cancel the card</strong><br />
The card is a long way from being finished, and its value is too small to pay for the time it will be paused.</p>
</li>
</ul>
<p>It is also important to notice that this should NOT be a common thing in your process. If it is happening too often, you may need to work on your prioritizations!</p>
<p>What are your thoughts on the topic? Leave your comments below <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<hr>
<div style="margin:20px 0 60px;">
<a href="http://pages.plataformatec.com.br/spreadsheet-forecasting-software-project-completion-date?utm_source=our-blog&#038;utm_medium=referral&#038;utm_campaign=monte-carlo-spreadsheet&#038;utm_content=cta-blog-post-bottom" target="_blank"><img decoding="async" class="aligncenter" src="/wp-content/uploads/2016/08/forecasting-software-project-cta.png" alt="Download: Forecasting software project through Monte Carlo simulation (FREE spreadsheet)"/></a>
</div><p>The post <a href="/2017/05/the-user-story-in-development-was-deprioritized-what-now/">The user story in development was deprioritized, what now?</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>A user story em desenvolvimento foi despriorizada, e agora?</title>
		<link>/2017/05/user-story-em-desenvolvimento-foi-despriorizada/</link>
		
		<dc:creator><![CDATA[Lucas Colucci]]></dc:creator>
		<pubDate>Thu, 04 May 2017 14:35:44 +0000</pubDate>
				<category><![CDATA[Português]]></category>
		<category><![CDATA[product backlog]]></category>
		<category><![CDATA[product owner]]></category>
		<category><![CDATA[produto digital]]></category>
		<category><![CDATA[software]]></category>
		<guid isPermaLink="false">/?p=6285</guid>

					<description><![CDATA[<p>Digamos que você tenha um quadro kanban como o seguinte: Então, no meio do seu sprint, o P.O. descobre que as features D e E foram lançadas por um concorrente e que vocês estão perdendo usuários por isso. Pensando nisso, a P.O. decide despriorizar a história C. Isso seria apenas um exemplo de como um ... <a class="read-more-link" href="/2017/05/user-story-em-desenvolvimento-foi-despriorizada/">»</a></p>
<p>The post <a href="/2017/05/user-story-em-desenvolvimento-foi-despriorizada/">A user story em desenvolvimento foi despriorizada, e agora?</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Digamos que você tenha um quadro kanban como o seguinte:</p>
<p><img loading="lazy" decoding="async" src="/wp-content/uploads/2017/05/card-flow-e1493907975371.png" alt="Kanban" width="400" height="268" class="aligncenter size-full wp-image-6286" style="border:none;" /></p>
<p>Então, no meio do seu sprint, o P.O. descobre que as features D e E foram lançadas por um concorrente e que vocês estão perdendo usuários por isso. Pensando nisso, a P.O. decide despriorizar a história C. Isso seria apenas um exemplo de como um card pode ser despriorizado no meio do seu desenvolvimento. Mas, e agora, o que acontece com a história C?</p>
<p>Para responder isso, deixe-me fazer um paralelo com uma companhia de perfumes a base de álcool.</p>
<p>Na coluna de backlog, a companhia tem a garrafa pronta mas sem fluído algum. Quando a garrafa começa a ser enchida, o card é passado para &#8220;in progress&#8221;. Após a garrafa estar cheia, ela é lacrada e o card vai para &#8220;done&#8221;.</p>
<p><img loading="lazy" decoding="async" src="/wp-content/uploads/2017/05/perfume-flow-e1493908094223.png" alt="Perfume flow" width="400" height="275" class="aligncenter size-full wp-image-6287" style="border:none;" /></p>
<p>O que acontece então se outro perfume tem sua prioridade elevada a um nível maior do que o que está sendo abastecido? Bom, como sabemos, fluídos com base em álcool são voláteis e, com o tempo, evamporam totalmente, sendo necessário que se reabasteça o recipiente.</p>
<p><img loading="lazy" decoding="async" src="/wp-content/uploads/2017/05/perfume-flow-volatile-e1493908131534.png" alt="Perfume flow volatile" width="400" height="567" class="aligncenter size-full wp-image-6288" style="border:none;" /></p>
<p>O mesmo acontece com uma história e seu código. Com o tempo, o código que compõe tal história se torna obsoleto e desnecessário, perdendo o valor que tinha outrora. Neste caso, o que fazer com a história despriorizada depende dos seguintes pontos:</p>
<ul>
<li><strong>Quanto tempo a história C continuará no mesmo estágio?</strong>
<ul>
<li>Se a história permanece muito tempo no mesmo estágio, alguma parte do trabalho já feito pode se tornar desnecessário, portanto, você poderia apenas removê-la da coluna e colocá-la de volta ao backlog, já que algum refinamento pode ser necessário para que essa história seja desenvolvida novamente.</li>
<li>Se a história vai ficar por um curto período de tempo em tal coluna, você pode optar por deixá-la lá e, quando sua hora chegar, pode continuar aproveitando o que já havia sido desenvolvido.</li>
</ul>
</li>
<li><strong>Qual o valor que a história C vai gerar quando pronta?</strong><br />
Digamos que o retorno gerado pelo desenvolvimento de tal feature seja pequeno. Será que vale a pena pausar seu desenvolvimento e ter o risco de investir ainda mais dinheiro no seu desenvolvimento em outro momento? O retorno gerado será maior do que o tempo total de desenvolvimento gasto?</p>
</li>
</ul>
<p>Para que isso seja verdade, o seguinte precisa acontecer (observado na imagem abaixo):</p>
<ul>
<li>$ gasto com o desenvolvimento inicial + $ gasto com o resto do desenvolvimento &lt; retorno da história C
<ul>
<li>A quantia gasta com o resto do desenvolvimento aumentará com o tempo, já que o desenvolvimento feito anteriormente vai perdendo valor.</li>
</ul>
</li>
<li>Caso o retorno seja menor do que o gasto, é melhor ignorar a funcionalidade. No entanto estes cálculos não são tão simples como parecem&#8230; Você precisa levar em conta riscos, aumento na receita, aumento no número de usuários, etc&#8230; Então tenha cuidado com essa ação.</li>
</ul>
<p><img loading="lazy" decoding="async" src="/wp-content/uploads/2017/05/chart-1024x768.png" alt="Gráficos" width="1024" height="768" class="aligncenter size-large wp-image-6289" style="border:none;max-width: 99%;" /></p>
<p>Portanto, baseado no que já foi dito, você pode ter as seguintes ações a respeito do card C:</p>
<ul>
<li><strong>Mantenha-o na coluna &#8220;in progress&#8221; e recomece o trabalho quando sua prioridade for retomada</strong><br />
Essa pausa será rápida e não afetará o desenvolvimento da feature. Neste caso é importante deixar visível de alguma forma no quadro que essa história está &#8220;bloqueada&#8221; por motivos de priorização.</p>
</li>
<li>
<p><strong>Ponha-o na coluna de backlog novamente, e recomece quando necessário</strong><br />
A pausa será longa e o card precisará de um novo refinamento.</p>
</li>
<li>
<p><strong>Termine-o primeiro, antes de começar outra história</strong><br />
O card está quase pronto e, caso você pare seu desenvolvimento, quando pronto, seu valor será menor do que o gasto no seu desenvolvimento.</p>
</li>
<li>
<p><strong>Cancele o seu desenvolvimento</strong><br />
A história está muito longe de ser terminada, e seu valor final é muito pequeno para pagar o tempo que ela ficará pausada.</p>
</li>
</ul>
<p>É importante também notar que isso NÃO deve ser algo comum em seu processo. Se coisas como essa estão acontecendo frequentemente, você pode precisar melhorar suas priorizações!</p>
<p>O que acha do que foi discutido aqui? Deixe seus comentários abaixo! <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p><a href="http://pages.plataformatec.com.br/ebook-como-lidar-com-prazos-em-projetos-de-software?utm_source=our-blog&#038;utm_medium=referral&#038;utm_campaign=ebook-como-lidar-com-prazos&#038;utm_content=cta-blog-post-bottom" target=_blank""><br />
<img loading="lazy" decoding="async" src="/wp-content/uploads/2017/03/CTA-blog-ebook-como-lidar-com-prazos.jpg" alt="Como lidar com prazo em projetos de software [e-book gratuito]" width="831" height="147" class="aligncenter size-full wp-image-6158" srcset="/wp-content/uploads/2017/03/CTA-blog-ebook-como-lidar-com-prazos.jpg 831w, /wp-content/uploads/2017/03/CTA-blog-ebook-como-lidar-com-prazos-300x53.jpg 300w, /wp-content/uploads/2017/03/CTA-blog-ebook-como-lidar-com-prazos-768x136.jpg 768w" sizes="(max-width: 831px) 100vw, 831px" /><br />
</a></p><p>The post <a href="/2017/05/user-story-em-desenvolvimento-foi-despriorizada/">A user story em desenvolvimento foi despriorizada, e agora?</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
