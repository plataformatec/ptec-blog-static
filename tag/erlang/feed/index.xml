<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>erlang Â« Plataformatec Blog</title>
	<atom:link href="/tag/erlang/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Plataformatec&#039;s place to talk about Ruby, Ruby on Rails, Elixir, and software engineering</description>
	<lastBuildDate>Fri, 14 Dec 2018 17:06:20 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Beyond Functional Programming with Elixir and Erlang</title>
		<link>/2016/05/beyond-functional-programming-with-elixir-and-erlang/</link>
					<comments>/2016/05/beyond-functional-programming-with-elixir-and-erlang/#comments</comments>
		
		<dc:creator><![CDATA[JosÃ© Valim]]></dc:creator>
		<pubDate>Wed, 25 May 2016 18:37:35 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[elixir]]></category>
		<category><![CDATA[erlang]]></category>
		<guid isPermaLink="false">/?p=5438</guid>

					<description><![CDATA[<p>I would like to add a slightly different perspective to functional programming in the Erlang VM: functional programming is not a goal in the Erlang VM. It is a means to an end. When designing the Erlang language and the Erlang VM, Joe, Mike and Robert did not aim to implement a functional programming language, ... <a class="read-more-link" href="/2016/05/beyond-functional-programming-with-elixir-and-erlang/">Â»</a></p>
<p>The post <a href="/2016/05/beyond-functional-programming-with-elixir-and-erlang/">Beyond Functional Programming with Elixir and Erlang</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>I would like to add a slightly different perspective to functional programming in the Erlang VM: functional programming is not a goal in the Erlang VM. It is a means to an end.</p>
<p>When designing the Erlang language and the Erlang VM, Joe, Mike and Robert did not aim to implement a functional programming language, they wanted a runtime where they could build distributed, fault-tolerant applications. It just happened that the foundation for writing such systems share many of the functional programming principles. And it reflects in both Erlang and Elixir.</p>
<p>Therefore, the discussion becomes much more interesting when you ask about their end-goals and how functional programming helped them achieve them. The further we explore those goals, we realize how they tie in with immutability and the control of shared state, for example:</p>
<ul>
<li><strong>Fault-tolerance</strong>: if you have two entities in your software that work on the same piece of data and one of them fails (i.e. it raises an exception), how do you guarantee that the failed entity did not leave a corrupt state? In Elixir, you would isolate those entities into light-weight threads of execution called processes and guarantee their state is not shared (coordination happens over communication);</p>
</li>
<li>
<p><strong>Concurrency</strong>: many of the issues in writing concurrent software in OO and imperative languages comes from managing shared mutable state. Since both sharing (via a global namespace) and mutability are the default mode of operations in those languages, it is harder to pinpoint the pieces of data that can get you in trouble. With immutability as a default, the mutable parts that you effectively need to focus on when writing concurrent software will stand-out and give developers more precision when tackling race conditions;</p>
</li>
<li>
<p><strong>Maintainability</strong>: the foundation for writing more maintainable code in both Erlang and Elixir come from functional programming. Immutable data ensures the data no longer changes under our feet! Pattern-matching brings terseness, protocols introduce dynamic polymorphism backed by explicit contracts, etc.</p>
</li>
</ul>
<p>The examples above are why I prefer, most of the time, to <a href="https://www.youtube.com/watch?v=B4rOG9Bc65Q" target="_blank" rel="noopener">introduce Elixir as a language for building maintainable and robust systems</a>. And while <a href="/2016/01/comparing-elixir-and-erlang-variables/">some of the functional semantics may differ between Erlang and Elixir</a> (rebinding, pipelines, etc), they are still means to an end. Past that, the foundation for building fault-tolerance and distribution applications in both languages is precisely the same since they are both built on top of the same VM and the OTP platform.</p>
<p>That&#8217;s not to say the functional aspect is not important. It definitely is! I often summarize functional programming as a paradigm that forces us to make the complex parts of our system explicit and that&#8217;s an important guideline when writing software. Fortunately, many of the functional programming lessons can be applied to other non-FP languages and platforms.</p>
<p>However, other features in the Erlang VM are less portable. Concurrency must come from the ground-up. <a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">All languages are constrained by Amdahl&#8217;s law</a> and it is important to maximize the parallel portion of our applications. Writing concurrent code is simpler when the runtime provides efficient abstractions and developers have good tooling to reason about concurrency.</p>
<p>Fault-tolerance is even trickier as it cannot be applied only to parts of your application. The whole ecosystem must be built on top of the same principles otherwise the &#8220;weakest link in the chain&#8221; will always break.</p>
<p>If you are building services that are meant to run 24/7 and serve multiple clients (and most network services and web applications must do precisely this), you must choose a platform that provides concurrency, robustness, and responsiveness from the ground-up. You want to give the best user experience to as many users as possible.</p>
<p>More importantly, those concerns go much beyond the infrastructure point of view. Developers often associate performance and concurrency with their application throughput (how many requests it can serve per second), however, such capabilities also directly affect the programmer productivity. If code compilation is slow or your application takes long to boot or your test suite spans over minutes, they become hurdles the programmer must overcome daily to write code. Hurdles that could be addressed by a more efficient and concurrent runtime. After all, in 2016, almost everything you do in your programming environment must be using all cores available.</p>
<p>Here is a quick exercise: imagine you have a CPU-intensive test suite that takes 2 minutes to run using a single-core. If your machine has 4 cores, its execution time could be reduced ideally to 30 seconds. However, given it is unlikely for the whole suite to be CPU intensive and to run fully in parallel, if we assume a parallelization of 80%, our suite will still take roughly only 48 seconds long, which is 2.5 times faster.</p>
<p>A strong foundation guarantees your users will enjoy a more fluid and robust experience and also gives developers a more productive and joyful working environment. That&#8217;s why tools <a href="http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html" target="_blank" rel="noopener">such as Elixir&#8217;s Mix</a> puts a lot of effort into, not only running your tests asynchronously but also in compiling all of your code in parallel and as fast as possible. The abstractions that provide fault-tolerance also give developers a great deal of introspection into both <a href="/2015/06/elixir-in-times-of-microservices/">production</a> and <a href="/2016/04/debugging-techniques-in-elixir-lang/">development</a> environments. The fact Erlang and Elixir were built with such concerns in mind is what makes them one of the best options out there for writing such systems.</p>
<p><em>I would like to thank Robert Virding for reviewing the article. Still, all opinions and inaccuracies are my own. <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="ðŸ™‚" class="wp-smiley" style="height: 1em; max-height: 1em;" /></em></p>
<p>&nbsp;</p>
<p><a href="https://pages.plataformatec.com.br/elixir-development-subscription" target="_blank" rel="noopener"><img fetchpriority="high" decoding="async" class="aligncenter wp-image-8124 size-full" src="/wp-content/uploads/2016/05/admin-ajax-1.png" alt="" width="1024" height="213" srcset="/wp-content/uploads/2016/05/admin-ajax-1.png 1024w, /wp-content/uploads/2016/05/admin-ajax-1-300x62.png 300w, /wp-content/uploads/2016/05/admin-ajax-1-768x160.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p><p>The post <a href="/2016/05/beyond-functional-programming-with-elixir-and-erlang/">Beyond Functional Programming with Elixir and Erlang</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/2016/05/beyond-functional-programming-with-elixir-and-erlang/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
	</channel>
</rss>
