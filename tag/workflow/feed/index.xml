<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>workflow « Plataformatec Blog</title>
	<atom:link href="/tag/workflow/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Plataformatec&#039;s place to talk about Ruby, Ruby on Rails, Elixir, and software engineering</description>
	<lastBuildDate>Mon, 24 Sep 2018 14:51:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>5 Strategies to improve software development workflow</title>
		<link>/2016/08/5-strategies-to-improve-software-development-workflow/</link>
		
		<dc:creator><![CDATA[Wesley Zapellini]]></dc:creator>
		<pubDate>Wed, 03 Aug 2016 20:02:48 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[Agile]]></category>
		<category><![CDATA[Agile Software]]></category>
		<category><![CDATA[project management]]></category>
		<category><![CDATA[workflow]]></category>
		<guid isPermaLink="false">/?p=5572</guid>

					<description><![CDATA[<p>It is difficult to come up with a plan when you find yourself in a dysfunctional environment. Everything is on fire and there is no time available. Tight deadlines, pressure, working overtime, unsatisfied customers, waste, and a whole lot of other chaotic stuff that piles up and makes it difficult to pick the most critical ... <a class="read-more-link" href="/2016/08/5-strategies-to-improve-software-development-workflow/">»</a></p>
<p>The post <a href="/2016/08/5-strategies-to-improve-software-development-workflow/">5 Strategies to improve software development workflow</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>It is difficult to come up with a plan when you find yourself in a dysfunctional environment. Everything is on fire and there is no time available. Tight deadlines, pressure, working overtime, unsatisfied customers, waste, and a whole lot of other chaotic stuff that piles up and makes it difficult to pick the most critical problem to fix.</p>
<p>I will offer guidance in situations like this with five strategies in a recommended sequence. They are aligned with Lean principles and will work as a guide whichever method you use, be it Scrum, Kanban, XP or any other.</p>
<p>These strategies came to my attention while attending a course called <a href="http://softwarezen.me/" target="_blank" rel="noopener">SoftwareZen</a>, by Alisson Vale. Alisson is a Kanban pioneer here in Brazil and I strongly recommend his course to all Portuguese speakers out there.</p>
<p>The strategies were complemented with our experience at Plataformatec and the content I presented (<a href="https://speakerdeck.com/wesleytz/estrategias-para-otimizar-um-sistema-de-trabalho" target="_blank" rel="noopener">here the slides in Portuguese</a>) at <a href="http://www.agilefloripa.com.br/" target="_blank" rel="noopener">Agile Floripa 2016</a>.</p>
<h2>An overview of the strategies</h2>
<p>A work system, like any other system, has an input, a processing area, an output and a feedback loop:</p>
<p><img fetchpriority="high" decoding="async" class="aligncenter size-full wp-image-5586" src="/wp-content/uploads/2016/08/agile-workflow.png" alt="Agile workflow" width="593" height="158" srcset="/wp-content/uploads/2016/08/agile-workflow.png 593w, /wp-content/uploads/2016/08/agile-workflow-300x80.png 300w" sizes="(max-width: 593px) 100vw, 593px" /></p>
<p>To be generic, let&#8217;s call &#8220;work items&#8221; all things that flow in a working system. The processing area deals with work items related to the present, the system&#8217;s input has work items that will be processed in the future and the output has items that had already been worked on.</p>
<p>It&#8217;s a good practice to start improvement by looking at the &#8220;Present&#8221;. This will give good leverage to the actions applied. It doesn&#8217;t mean that &#8220;Future&#8221; and &#8220;Past&#8221; are not important, they are complementary. Learning with &#8220;Past&#8221; work items can make your &#8220;Future&#8221; ones better.</p>
<p>Having this in mind, this is how the strategies are related to the system areas and the recommended sequence to apply them:</p>
<p><img decoding="async" class="aligncenter size-full wp-image-5587" src="/wp-content/uploads/2016/08/strategies-agile-workflow.png" alt="Strategies agile workflow" width="681" height="424" srcset="/wp-content/uploads/2016/08/strategies-agile-workflow.png 681w, /wp-content/uploads/2016/08/strategies-agile-workflow-300x187.png 300w" sizes="(max-width: 681px) 100vw, 681px" /></p>
<p>In the following weeks, I&#8217;ll post the first two strategies, &#8220;Start with work in progress&#8221; and &#8220;Reduce work item size&#8221; as a preview of an ebook I&#8217;m writing, 5 Strategies to improve software development workflow. The e-book will feature the content below:</p>
<ul>
<li><strong>Start with work in progress</strong>: The first strategy shows why it&#8217;s a good idea to start looking at your system&#8217;s work in progress (WIP). Also, you will get to know how to do it through these practices:
<ul style="margin-top: -20px;">
<li>Making the current workflow tangible;</li>
<li>Managing capacity;</li>
<li>Promoting tactical coordination;</li>
</ul>
</li>
<li><strong>Reduce work item size</strong>: Slicing work into smaller pieces helps creating a healthy workflow and is one of the principles of Lean thinking. I will recommend some techniques to do it with different types of work items.</li>
<li><strong>Promote collaboration</strong>: Which characteristics do you have to pursue to achieve collaboration in team and organizational levels? And which ones do you have to avoid? That will be addressed in the third strategy.</li>
<li><strong>Do the right thing</strong>: Capacity is precious. Working in stuff that doesn&#8217;t matter is pure waste. The fourth strategy is all about techniques to help ensure you are working on the most important thing at the moment, in business, product and team levels.</li>
<li><strong>Make results tangible</strong>: The last strategy brings some tips on giving visibility to achievements, mainly with metrics. This will help with predictability, sense of progress and also with data to drive continuous improvement.</li>
</ul>
<p>The ebook will be available to download very soon. If you want to get the Portuguese version, <a href="http://pages.plataformatec.com.br/5-estrategias-para-otimizar-fluxo-de-desenvolvimento-de-software?utm_source=our-blog&amp;utm_medium=referral&amp;utm_campaign=ebook-5-estratgias-para-fluxo&amp;utm_content=cta-blog-post-bottom" target="_blank" rel="noopener">click here</a>.</p>
<p>Until then, leave your comments below and stay tuned for the upcoming weeks!</p>
<hr />
<div style="margin: 20px 0 60px;"></div><p>The post <a href="/2016/08/5-strategies-to-improve-software-development-workflow/">5 Strategies to improve software development workflow</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>A (successful) git branching model</title>
		<link>/2011/04/a-successful-git-branching-model/</link>
					<comments>/2011/04/a-successful-git-branching-model/#comments</comments>
		
		<dc:creator><![CDATA[Rodrigo Flores]]></dc:creator>
		<pubDate>Wed, 27 Apr 2011 19:31:09 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[git]]></category>
		<category><![CDATA[project]]></category>
		<category><![CDATA[workflow]]></category>
		<guid isPermaLink="false">/?p=1985</guid>

					<description><![CDATA[<p>*This blog post tells about how we improved a VCS workflow to another one that suited our and the consumer needs. It was a great result: we minimized the chances of occurring one of the worst problems for a developer in a project: big integration while we maintained an &#8216;almost releasable branch&#8217; all the time ... <a class="read-more-link" href="/2011/04/a-successful-git-branching-model/">»</a></p>
<p>The post <a href="/2011/04/a-successful-git-branching-model/">A (successful) git branching model</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p><em>*This blog post tells about how we improved a VCS workflow to another one that suited our and the consumer needs. It was a great result: we minimized the chances of occurring one of the worst problems for a developer in a project: big integration while we maintained an &#8216;almost releasable branch&#8217; all the time</em></p>
<p>In the last months we&#8217;ve been working on a project with a mixed development team (Plataformatec&#8217;s team and the customer&#8217;s team). We, of course, used a version control system (specifically git) and we set up a nice git branching model for our team. As agilists, we know that we should not use anything that requires a lot of bureaucracy (things like opening a ticket to integrate a branch into the trunk).</p>
<p>Using <a href="http://nvie.com/posts/a-successful-git-branching-model/">nvie guide</a> as base, we developed a git workflow. First of all, we had three main branches:</p>
<ul>
<li><strong>production</strong>: contains the code that is currently on production. We also have a production server that contains, obviously, the production code up and running.</li>
<li><strong>staging</strong>: contains the code that is being tested before going to production (we used this branch to deploy to a production-like environment that worked as a final test until production, this environment is also called staging)</li>
<li><strong>master</strong>: contains the already accepted features. To consider a feature as &#8220;accepted&#8221; we deployed to another environment (called &#8220;dev&#8221;) and asked a QA analyst to test it. Once approved we merged the commits. This &#8220;dev&#8221; environment is used for this kind of approval and also for general purposes like when we say: &#8220;take a look at this new awesome feature we&#8217;re developing&#8221;.</li>
</ul>
<p>For each feature that we developed, we created a git branch (almost all of them we pushed it to the remote server to facilitate code review and to deploy to the &#8220;dev&#8221; environment). Everyday, we ran <code>git rebase master</code>, to update our branch code (except for features developed by more than one developer). Once the feature is complete, we rebased master into it, and merge it using &#8211;no-ff (to create a merge commit). For the branches that more than one developer worked on, we usually talked and set up a &#8220;rebase period&#8221; where one does the rebase, forces the push (because you changed your local tree so git does not accept it as a non forced push) and updates the remote branch.</p>
<p>Close to the production deploy, we merged (always using &#8211;no-ff) master branch into staging branch and deploy to staging. Once approved, we merged to production, and created a tag telling the current version of the application and then we do the deploy. When we deployed to production we also removed the merged branches from the remote repository.</p>
<p>One of the great advantages of this schema is: Master is always &#8220;almost&#8221; ready for a release. Yeah, some features really deserves to be validated right before the deploy, because another feature can break them, but we kept the master as an &#8220;always releasable stable&#8221; branch (and also we used a continuous integration tool in order to enforce all tests passing). Another great advantage is: as we updated our code everyday, it was very unusual for us to face big integration scenarios.</p>
<p>For the &#8220;dev&#8221; environment deploy we also set up a capistrano task that asks which branch we want to deploy to be possible to deploy something from any branch.</p>
<p>This workflow has worked really well for us and maybe it is useful to you (maybe for you to adapt it to something that works better for you as we did with the workflow suggested on <a href="http://nvie.com/posts/a-successful-git-branching-model/">nvie</a>).</p>
<p>To summarize, this is our git workflow in commands (supposing that we are on master branch):<br />
<code><br />
git checkout -b my-awesome-feature</p>
<h1>(... you do some code and some commits and you go home to have some sleep or maybe play some starcraft 2 ...)</code></h1>
<p><code>#(arrived at the office on the next day)<br />
git rebase master</code></p>
<p><code>#(... continue working and commiting and sleeping (or maybe playing some starcraft 2 ...)<br />
git rebase master</code></p>
<p><code># (... some commits ... and voila ... you've finished...)<br />
git push origin my-awesome-feature<br />
cap dev deploy<br />
</code></p>
<p><code># (...YAY!  QA analyst just approved it ...)<br />
git pull origin master<br />
git rebase master<br />
</code></p>
<p><code># (run the tests to ensure all of them pass)<br />
git checkout master<br />
git pull --rebase origin master<br />
git merge --no-ff my-awesome-branch<br />
git push origin master</code></p>
<p><code>#(... it is time to validate on staging)<br />
git checkout staging<br />
git pull origin staging<br />
git merge --no-ff master<br />
git push origin staging<br />
cap staging deploy</code></p>
<p><code>#(... QA analysts validate the staging ...)<br />
git checkout production<br />
git merge --no-ff staging<br />
git tag -a v1.4.2 -m "Releasing on 13th February"<br />
git push origin production<br />
git push --tags origin production<br />
cap production deploy<br />
</code></p>
<p>Well, this is how we improved a git workflow based in another one. As almost everything, there is no bullet proof for it, but we found interesting to share this experience with you as it was a success (every developer on the team enjoyed it). But please, we would like to receive some feedback about it :-). Have you used something similar in your team? Do you have any ideas on how we can improve it?</p><p>The post <a href="/2011/04/a-successful-git-branching-model/">A (successful) git branching model</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/2011/04/a-successful-git-branching-model/feed/</wfw:commentRss>
			<slash:comments>9</slash:comments>
		
		
			</item>
	</channel>
</rss>
