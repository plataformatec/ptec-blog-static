<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>pattern matching « Plataformatec Blog</title>
	<atom:link href="/tag/pattern-matching/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Plataformatec&#039;s place to talk about Ruby, Ruby on Rails, Elixir, and software engineering</description>
	<lastBuildDate>Tue, 23 Sep 2014 21:28:02 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Writing assertive code with Elixir</title>
		<link>/2014/09/writing-assertive-code-with-elixir/</link>
		
		<dc:creator><![CDATA[José Valim]]></dc:creator>
		<pubDate>Wed, 24 Sep 2014 12:00:01 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[assertive code]]></category>
		<category><![CDATA[elixir]]></category>
		<category><![CDATA[pattern matching]]></category>
		<category><![CDATA[protocols]]></category>
		<guid isPermaLink="false">/?p=4228</guid>

					<description><![CDATA[<p>Functional languages are typically great languages for writing assertive code and Elixir is no exception. In this blog post, I would like to discuss some anti-patterns I have seen in Elixir code and how to rewrite them in a way to make the best of Elixir. Pattern matching Imagine you have a string with format ... <a class="read-more-link" href="/2014/09/writing-assertive-code-with-elixir/">»</a></p>
<p>The post <a href="/2014/09/writing-assertive-code-with-elixir/">Writing assertive code with Elixir</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Functional languages are typically great languages for writing assertive code and Elixir is no exception. In this blog post, I would like to discuss some anti-patterns I have seen in Elixir code and how to rewrite them in a way to make the best of Elixir.</p>
<h3>Pattern matching</h3>
<p>Imagine you have a string with format <code>foo=bar&amp;token=value&amp;bar=baz</code> where you want to extract the value for the key <code>token</code> which may appear anywhere or not at all in the string.</p>
<p>Here is one solution a developer not very-acquainted with pattern matching would try:</p>
<pre lang="ruby">
def get_token(string) do
  parts = String.split(string, "&")
  Enum.find_value(parts, fn pair ->
    key_value = String.split(pair, "=")
    Enum.at(key_value, 0) == "token" && Enum.at(key_value, 1)
  end)
end
</pre>
<p>At first the code seems to work fine but once we go deeper we can see it makes many assumptions we have not really planned for!</p>
<p>For example, what happens if someone passes <code>"foo=bar&amp;token=some=value&amp;bar=baz"</code> as argument? The code will work and will return the string <code>"some"</code>. But is that what we really want? Maybe we wanted <code>"some=value"</code> instead? Or maybe we wanted to reject it all together?</p>
<p>There are other examples where the code above would work by accident, possibly adding complexity to the codebase as other users may start to rely on such behaviour.</p>
<p>The most idiomatic way of writing the code above in Elixir is by using pattern matching:</p>
<pre lang="ruby">
def get_token(string) do
  parts = String.split(string, "&")
  Enum.find_value(parts, fn pair ->
    [key, value] = String.split(pair, "=")
    key == "token" && value
  end)
end
</pre>
<p>With pattern matching, we are asserting that <code>String.split/2</code> is going to return a list with two elements. If someone passes <code>"foo=bar&amp;token&amp;bar=baz"</code>, it will crash as the list will have only one element. If someone passes <code>"token=some=value"</code>, it will crash too as it contains 3 items.</p>
<p>Our new code does not contain any of the accidental complexity of the previous one and it will also be faster. Any input that does not match the given pattern will lead to a crash, giving us the perfect opportunity to discuss and decide how to handle those corner cases.</p>
<h3>Polymorphism is opt-in</h3>
<p>Elixir provides protocols as a mechanism for polymorphism. A protocol allows developers to express they are willing to work with any data type, as long as it implements the protocols X, Y and Z.</p>
<p>I have previously <a href="/2014/06/comparing-protocols-and-extensions-in-swift-and-elixir/">compared Elixir protocols to alternatives in languages like Swift and Ruby</a>. One nice aspect of Elixir protocols is that they are explicit, you need to explicitly outline and define a protocol for data structures to implement.</p>
<p>For example, one protocol in Elixir is the <code>String.Chars</code> protocol, which converts any data type to a string, if that data type can be converted to a human-readable string. The <code>to_string</code> function uses such protocol for conversions:</p>
<pre lang="ruby">
iex> to_string("hello")
"hello"
iex> to_string(1)
"1"
iex> to_string URI.parse("/")
"/"
iex> to_string %{hello: :world}
** (Protocol.UndefinedError) protocol String.Chars not implemented for %{hello: :world}
</pre>
<p>Imagine you have a function that converts underscores to dashes in a string:</p>
<pre lang="ruby">
def dasherize(string), do: String.replace(string, "_", "-")
</pre>
<p>Now imagine that at some point you decide to call <code>to_string/1</code> before calling <code>replace/3</code>:</p>
<pre lang="ruby">
def dasherize(data), do: String.replace(to_string(data), "_", "-")
</pre>
<p>Albeit small, this is a drastic change to our code. Our dasherize function went from supporting only strings as argument to support a large number of data types. In other words, our code became less assertive and more generic.</p>
<p>That said, before adding protocols to our code, we should ask if we really intend to open our function to all types. Maybe we want dasherize to support only atoms and strings? If so, we should rather write:</p>
<pre lang="ruby">
def dasherize(data) when is_atom(data), do: dasherize(Atom.to_string(data))
def dasherize(data), do: String.replace(data, "_", "-")
</pre>
<p>However, if we are confident we want a protocol, then we should indeed use the protocol and write a test case that guarantees our function works for at least a couple types that implement such protocol. Such tests are extremely important to guarantee we don&#8217;t make a different assumption somewhere in the same function.</p>
<p>Note this trade-off does not only happen in protocols, but in any polymorphic API, like the <code>Dict</code> module. In practice, one should rather use specific dict implementations, like the <code>Keyword</code> and <code>Map</code> modules, and rely on the <code>Dict</code> module only when polymorphism is desired.</p>
<h3>Map/struct access</h3>
<p>Elixir provides maps, known as dictionaries in other languages, as a key-value data structure. Maps are created as follows:</p>
<pre lang="ruby">
map = %{name: "john", age: 42}
</pre>
<p>Maps allow two types of access. A strict access, that requires the field name to exist in the map, and a dynamic access, that returns nil if the field does not exist in the map:</p>
<pre lang="ruby">
# Strict access
iex> map.name
"john"
iex> map.address
** (KeyError) key :address not found in: %{age: 42, name: "john"}

# Dynamic access
iex> map[:name]
"john"
iex> map[:address]
nil
</pre>
<p>Both syntaxes have their use cases but we should prefer the strict syntax when possible as it helps us find bugs early on. The same applies to structs, which are named maps:</p>
<pre lang="ruby">
defmodule User do
  defstruct [:first_name, :last_name, :age]

  def name(user) do
    "#{user.first_name} #{user.last_name}"
  end
end

User.name %User{first_name: "John", last_name: "Doe"}
#=> "John Doe"
</pre>
<p>In the example above, we have defined a User struct and a <code>name/1</code> function that receives the struct and returns its name. Since we are using <code>user.first_name</code>, if we accidentally pass a struct that does not contain such a field, it will crash immediately, with a nice error message!</p>
<p>In fact, the strict aspect of the <code>user.first_name</code> syntax is one of the reasons why structs do not support the dynamic syntax out of the box:</p>
<pre lang="ruby">
user = %User{first_name: "John", last_name: "Doe"}
user[:first_name]
** (Protocol.UndefinedError) protocol Access not implemented for %User{...}
</pre>
<p>In case you want to use the dynamic syntax, you need to derive the Access protocol for the User struct:</p>
<pre lang="ruby">
defmodule User do
  @derive [Access]
  defstruct [:first_name, :last_name, :age]

  def name(user) do
    "#{user.first_name} #{user.last_name}"
  end
end
</pre>
<p>However, only derive Access when you truly need to do so, as it is much better to push yourself to rely more on the strict syntax. I would even say relying on Access for structured data is an anti-pattern itself!</p>
<h3>Wrapping up</h3>
<p>The most interesting aspect of all examples above is that writing in the assertive style leads to faster, more concise and maintainable code. Even more, it allows us to focus on specific scenarios, postponing any complexity (incidental or accidental) to <em>only when we need them, if we need them</em>.</p>
<p style="text-align: center;">
<p><span id="hs-cta-wrapper-2aeae558-5b72-4df3-bf32-e1119f34d85e" class="hs-cta-wrapper"><span id="hs-cta-2aeae558-5b72-4df3-bf32-e1119f34d85e" class="hs-cta-node hs-cta-2aeae558-5b72-4df3-bf32-e1119f34d85e"> <a href="http://cta-redirect.hubspot.com/cta/redirect/378213/2aeae558-5b72-4df3-bf32-e1119f34d85e"><img decoding="async" id="hs-cta-img-2aeae558-5b72-4df3-bf32-e1119f34d85e" class="hs-cta-img aligncenter" style="border-width: 0px;" src="https://no-cache.hubspot.com/cta/default/378213/2aeae558-5b72-4df3-bf32-e1119f34d85e.png" alt="" /></a></span></span><br />
<!-- end HubSpot Call-to-Action Code --></p><p>The post <a href="/2014/09/writing-assertive-code-with-elixir/">Writing assertive code with Elixir</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
