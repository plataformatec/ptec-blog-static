<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>mirror « Plataformatec Blog</title>
	<atom:link href="/tag/mirror/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Plataformatec&#039;s place to talk about Ruby, Ruby on Rails, Elixir, and software engineering</description>
	<lastBuildDate>Fri, 01 Nov 2019 19:52:31 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>How to properly mirror a git repository</title>
		<link>/2013/05/how-to-properly-mirror-a-git-repository/</link>
					<comments>/2013/05/how-to-properly-mirror-a-git-repository/#comments</comments>
		
		<dc:creator><![CDATA[George Guimarães]]></dc:creator>
		<pubDate>Tue, 21 May 2013 22:46:52 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[git]]></category>
		<category><![CDATA[mirror]]></category>
		<guid isPermaLink="false">/?p=3463</guid>

					<description><![CDATA[<p>When people talk about mirroring a git repository, usually we have a simple answer in mind: Just git clone the repo and you&#8217;re set!! However, what we want with mirroring is to replicate the state of an origin repository (or upstream repository). By state, we mean all the branches (including master) and all the tags ... <a class="read-more-link" href="/2013/05/how-to-properly-mirror-a-git-repository/">»</a></p>
<p>The post <a href="/2013/05/how-to-properly-mirror-a-git-repository/">How to properly mirror a git repository</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>When people talk about mirroring a git repository, usually we have a simple answer in mind:</p>
<blockquote><p>
  Just git clone the repo and you&#8217;re set!!</p></blockquote>
<p>However, what we want with mirroring is to replicate the state of an origin repository (or upstream repository). By state, we mean all the branches (including <code>master</code>) and all the tags as well.</p>
<p>You&#8217;ll need to do this when migrating your upstream repository to a new &#8220;home&#8221;, like when switching services like GitHub.</p>
<p>As with most tools, there&#8217;s a lot of ways to accomplish that, but I&#8217;ll be focusing on two of them. The difference lays on whether you already have a working copy of that repository or not.</p>
<h2>Mirroring a git repository without a local copy</h2>
<p>If you haven&#8217;t cloned the repository before, you can mirror it to a new home by</p>
<pre lang="bash">$ git clone --mirror git@example.com/upstream-repository.git
$ cd upstream-repository.git
$ git push --mirror git@example.com/new-location.git
</pre>
<p>This will get all the branches and tags that are available in the upstream repository and will replicate those into the new location.</p>
<h3>Warning</h3>
<p>Don&#8217;t use <code>git push --mirror</code> in repositories that weren&#8217;t cloned by <code>--mirror</code> as well. It&#8217;ll overwrite the remote repository with your local references (and your local branches). This is not what we want. Read the next section to discover what to do in these cases.</p>
<p>Also <code>git clone --mirror</code> is prefered over <code>git clone --bare</code> because the former also clones git notes and some other attributes.</p>
<h2>Mirroring a git repository if you already have a local working copy</h2>
<p>By working copy, we mean a &#8220;normal&#8221; repository, in which you have the files that are being tracked into git and where you perform commands like <code>git add</code> and so on.</p>
<p>In this case, you may have a lot of local branches and tags that you don&#8217;t want to copy to the new location. But you do have references to remote branches. You can view them with <code>git branches -r</code>. If you pay attention to that list, tough, you may notice that you have a lot of branches that were already deleted in the upstream repository. Why?</p>
<h3>Cleaning old references to remote branches</h3>
<p>By default, when you do a <code>git fetch</code> or <code>git pull</code>, git will not delete the references to branches that were deleted in the upstream repository (you may view them in your <code>.git/refs/remotes</code> dir). We need to clean those old references before mirroring them to a new location.</p>
<p>To do so, run</p>
<pre lang="bash">$ git fetch --prune
</pre>
<p>This will update your references to the origin repository and also clean the stale branches reported by <code>git branch -r</code>.</p>
<h3>Finally, mirroring the repository to a new location</h3>
<p>Now we&#8217;re ready to send those updated references back to the <code>origin</code> repository:</p>
<pre lang="bash">$ git push --prune git@example.com:/new-location.git +refs/remotes/origin/*:refs/heads/* +refs/tags/*:refs/tags/*
</pre>
<p>Ok, what just happened here?!</p>
<p>We want those references inside the <code>.git/refs/remotes/origin</code> to be the LOCAL references in the new location. The local references there will be stored in the <code>refs/heads</code> dir. Same thing happens to tags.</p>
<p>The <code>+</code> sign indicates that we want to <strong>overwrite</strong> any reference there may already exist.</p>
<p><code>--prune</code> means we want to delete any reference that may exist there if we don&#8217;t have such reference in our <code>refs/remotes/origin/*</code> (and tags) references.</p>
<h2>Conclusion</h2>
<p>Git is certainly not an easy tool to learn. Although when you do, it turns into a very powerful and flexible tool.</p>
<p>If you want to learn more about it, please see the <a href="http://git-scm.com/book">excelent book written by Scott Chacon and available for free</a>.</p>
<p>What about you? Have any tips on git you want to share?</p>
<p style="text-align: center;">
<p><span id="hs-cta-wrapper-2aeae558-5b72-4df3-bf32-e1119f34d85e" class="hs-cta-wrapper"><span id="hs-cta-2aeae558-5b72-4df3-bf32-e1119f34d85e" class="hs-cta-node hs-cta-2aeae558-5b72-4df3-bf32-e1119f34d85e"> <a href="http://cta-redirect.hubspot.com/cta/redirect/378213/2aeae558-5b72-4df3-bf32-e1119f34d85e"><img decoding="async" id="hs-cta-img-2aeae558-5b72-4df3-bf32-e1119f34d85e" class="hs-cta-img aligncenter" style="border-width: 0px;" src="https://no-cache.hubspot.com/cta/default/378213/2aeae558-5b72-4df3-bf32-e1119f34d85e.png" alt=""></a></span></span><br />
<!-- end HubSpot Call-to-Action Code --></p><p>The post <a href="/2013/05/how-to-properly-mirror-a-git-repository/">How to properly mirror a git repository</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/2013/05/how-to-properly-mirror-a-git-repository/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
