<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>authorization « Plataformatec Blog</title>
	<atom:link href="/tag/authorization/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Plataformatec&#039;s place to talk about Ruby, Ruby on Rails, Elixir, and software engineering</description>
	<lastBuildDate>Thu, 22 Apr 2010 17:57:19 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.2</generator>
	<item>
		<title>Understanding Devise roles</title>
		<link>/2009/11/understanding-devise-roles/</link>
					<comments>/2009/11/understanding-devise-roles/#comments</comments>
		
		<dc:creator><![CDATA[José Valim]]></dc:creator>
		<pubDate>Tue, 17 Nov 2009 17:40:09 +0000</pubDate>
				<category><![CDATA[English]]></category>
		<category><![CDATA[authentication]]></category>
		<category><![CDATA[authorization]]></category>
		<category><![CDATA[devise]]></category>
		<category><![CDATA[plugins]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[roles]]></category>
		<guid isPermaLink="false">/?p=426</guid>

					<description><![CDATA[<p>After Devise was released, there were some misunderstandings about Devise roles and how to use it. And the best way to understand it is explaining which problem we wanted to solve when we designing Devise. In most applications developed at Plataforma, we usually have two actors: one which represents the client who hired us and ... <a class="read-more-link" href="/2009/11/understanding-devise-roles/">»</a></p>
<p>The post <a href="/2009/11/understanding-devise-roles/">Understanding Devise roles</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>After <a href="/2009/10/devise-flexible-authentication-solution-for-rails/">Devise was released</a>, there were some misunderstandings about <a href="http://github.com/plataformatec/devise">Devise</a> roles and how to use it. And the best way to understand it is explaining which problem we wanted to solve when we designing Devise.</p>
<p>In most applications developed at <a href="http://plataformatec.com.br/en/">Plataforma</a>, we usually have two actors: one which represents the client who hired us and another which is the end-user, the audience of the developed app.</p>
<p>Before Devise, we used Authlogic or Clearance as authentication solutions. Authlogic does not say anything about controllers, so we usually had two models (Admin and User) and some controllers to handle sign in, password reset and so forth for each model, which required expressive effort to handle and maintain.</p>
<p>On the other hand, we had Clearance. Clearance deals completely with the User model, but we needed to work on the Admin model almost from scratch.</p>
<p>With Devise, we can have a full stack solution for both User and Admin. But that only works if User and Admin does not need to share a lot of responsibilities.</p>
<p>For instance, if you are working on a blogging system with different roles as &#8220;editor&#8221;, &#8220;author&#8221; and &#8220;contributor&#8221;, but they all share a lot of activities in common, as writing a post, handling such roles with Devise can add a great of complexity to your code, mainly because you will need to use Single Table Inheritance (STI) and/or polymorphic relationships very frequently.</p>
<p>To handle such cases, you can use <a href="http://www.ruby-toolbox.com/categories/rails_authorization.html">any of the authorization libraries out there for Rails</a> (remember that Devise is mainly an <strong>authentication</strong> tool).</p>
<h3>Scoped authentication</h3>
<p>On the same line, there were some requests to provide authentication by username, instead of e-mail, or providing a subdomain as scope for the authentication. You can now do that using <a href="http://github.com/plataformatec/devise">Devise 0.5.1 or higher</a> by just setting the authentication keys in your model:</p>
<pre lang="ruby">
class User < ActiveRecord::Base
 devise :all, :authentication_keys => [ :username, :subdomain ]
end
</pre>
<p>Now you user needs an username and subdomain to authenticate and their respective value should be sent as parameters when signing in. Such values are converted to conditions when retrieving the user from the database for authentication. For example, the following path with query string:</p>
<pre>
/users/sign_in?user[username]=josevalim&user[subdomain]=plataformatec
</pre>
<p>Is converted to the following query with ActiveRecord:</p>
<pre lang="ruby">
User.first(:conditions => { :username => "josevalim", :subdomain => "plataformatec" })
</pre>
<p>And only after retrieving the user we check for password validity. However, keep in mind that those conditions are used only when signing in. If an user is already authenticated, it will be retrieved from session, where such conditions are not used. In other words, you still need a filter in your controllers to verify that the user accessing a given subdomain, is really allowed to access that subdomain.</p>
<p>Such configuration should handle most of the cases, but if you still need more customization, you can overwrite three class methods exposed for exactly this purpose: <a href="http://github.com/plataformatec/devise/blob/05fc5712e35407366c08b1adafad7f6547f1e381/lib/devise/models/authenticatable.rb#L71">User.authenticate</a>, <a href="http://github.com/plataformatec/devise/blob/05fc5712e35407366c08b1adafad7f6547f1e381/lib/devise/models/authenticatable.rb#L89">User.serialize_into_session</a> and <a href="http://github.com/plataformatec/devise/blob/05fc5712e35407366c08b1adafad7f6547f1e381/lib/devise/models/authenticatable.rb#L94">User.serialize_from_session</a>.</p>
<p>Enjoy!</p><p>The post <a href="/2009/11/understanding-devise-roles/">Understanding Devise roles</a> first appeared on <a href="/">Plataformatec Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>/2009/11/understanding-devise-roles/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>
